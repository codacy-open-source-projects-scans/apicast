location @grpc_upstream {

  internal;

  rewrite_by_lua_block {
    require('resty.ctx').apply()
  }

  grpc_pass grpcs://upstream;


  grpc_set_header X-Real-IP  $remote_addr;
  grpc_set_header Host $http_host;
  grpc_set_header X-3scale-grpc-secret-token $secret_token;
  grpc_set_header X-3scale-debug "";
  grpc_set_header Connection "";

  # This is a bit tricky. It uses liquid to set a SSL client certificate. In
  # NGINX, all this is not executed as it is commented with '#'. However, in
  # Liquid, all this will be evaluated. As a result, the following directives
  # are set optionally: grpc_ssl_certificate, grpc_ssl_certificate_key,
  # grpc_ssl_session_reuse, and grpc_ssl_password_file.

  # {% if proxy_ssl_certificate != empty and proxy_ssl_certificate_key != empty %}
  #   {% capture proxy_ssl %}
  #{#}   grpc_ssl_certificate {{ proxy_ssl_certificate }};
  #{#}   grpc_ssl_certificate_key {{ proxy_ssl_certificate_key }};
  #   {% endcapture %}
  #   {{ proxy_ssl | replace: "#{#}", "" }}
  #
  #   {% if proxy_ssl_password_file != empty %}
  #     {% capture proxy_ssl %}
  #{#}   grpc_ssl_password_file {{ proxy_ssl_password_file }};
  #     {% endcapture %}
  #   {{ proxy_ssl | replace: "#{#}", "" }}
  #   {% endif %}
  #
  #   {% if proxy_ssl_session_reuse != empty %}
  #     {% capture proxy_ssl %}
  #{#}   grpc_ssl_session_reuse {{ proxy_ssl_session_reuse }};
  #     {% endcapture %}
  #   {{ proxy_ssl | replace: "#{#}", "" }}
  #   {% endif %}
  # {% endif %}

  # When 'upstream_retry_cases' is empty, apply the same default as NGINX.
  # If the proxy_next_upstream directive is not declared, the retry policy
  # will never retry.
  # {% if upstream_retry_cases != empty %}
  #   {% capture proxy_next_upstream %}
  #{#}  grpc_next_upstream {{ upstream_retry_cases }};
  #   {% endcapture %}
  #   {{ proxy_next_upstream | replace: "#{#}", "" }}
  # {% else %}
  #   grpc_next_upstream error timeout;
  # {% endif %}
  # these are duplicated so when request is redirected here those phases are executed

  post_action @out_of_band_authrep_action;
  body_filter_by_lua_block { require('apicast.executor'):body_filter() }
  header_filter_by_lua_block { require('apicast.executor'):header_filter() }
}
