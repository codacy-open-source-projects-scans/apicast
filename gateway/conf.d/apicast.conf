set_by_lua $user_agent 'return require("apicast.user_agent")()';
set_by_lua_block $deployment {
  return require('apicast.user_agent').deployment()
}

lua_check_client_abort on;

# TODO: enable in the future when we support SSL
# ssl_certificate_by_lua_block { require('apicast.executor').call() }
# ssl_session_fetch_by_lua_block { require('apicast.executor').call() }
# ssl_session_store_by_lua_block { require('apicast.executor').call() }

location @out_of_band_authrep_action {
  internal;

  proxy_pass_request_headers off;

  set_by_lua $original_request_time 'return ngx.var.request_time';

  content_by_lua_block {
    require('resty.ctx').apply()
    require('apicast.executor'):post_action()
 }

  log_by_lua_block {
    ngx.var.post_action_impact = ngx.var.request_time - ngx.var.original_request_time
    require('apicast.executor'):log()
  }
}

location @upstream {
  internal;

  rewrite_by_lua_block {
    require('resty.ctx').apply()
  }

  proxy_request_buffering on;
  #{% include "conf.d/upstream_shared.conf" %}

  # these are duplicated so when request is redirected here those phases are executed
  post_action @out_of_band_authrep_action;
  body_filter_by_lua_block { require('apicast.executor'):body_filter() }
  header_filter_by_lua_block { require('apicast.executor'):header_filter() }
}

location @upstream_request_unbuffered {
  internal;

  rewrite_by_lua_block {
    require('resty.ctx').apply()
  }

  proxy_request_buffering off;
  #{% include "conf.d/upstream_shared.conf" %}

  # these are duplicated so when request is redirected here those phases are executed
  post_action @out_of_band_authrep_action;
  body_filter_by_lua_block { require('apicast.executor'):body_filter() }
  header_filter_by_lua_block { require('apicast.executor'):header_filter() }
}

location / {
  set $cached_key '';
  set $credentials '';
  set $usage '';
  set $service_id '';
  set $proxy_pass '';
  set $secret_token '';

  set $backend_host 'backend';
  set $backend_authentication_type '';
  set $backend_authentication_value '';
  set $version '';
  set $real_url '';

  set $ctx_ref -1;

  set $original_request_id $request_id;
  set $original_request_uri '$scheme://$host$request_uri';

  # Variables needed by Websocket policy
  set $upstream_connection_header '';
  set $upstream_upgrade_header $http_upgrade;

  # Variable to enable/disable content cache
  set $cache_request 'true';
  set $cache_zone 'off';

  set $target_host $host;

  set $upstream_keepalive_key "";

  # {% if http_keepalive_timeout != empty %}
  #   {% capture keepalive_timeout %}
  #{#}   keepalive_timeout {{ http_keepalive_timeout}};
  #   {% endcapture %}
  #   {{ keepalive_timeout | replace: "#{#}", "" }}
  # {% endif %}

  proxy_ignore_client_abort on;
  rewrite_by_lua_block {
    require('resty.ctx').stash()
    require('apicast.executor'):rewrite()
  }
  access_by_lua_block { require('apicast.executor'):access() }

  content_by_lua_block { require('apicast.executor'):content() }

  # these are duplicated so those phases are executed when no internal redirect happens
  post_action @out_of_band_authrep_action;
  body_filter_by_lua_block { require('apicast.executor'):body_filter() }
  header_filter_by_lua_block { require('apicast.executor'):header_filter() }

  include ../apicast.d/location.d/*.conf;
}

# This exposes a health check for kubernetes environments
# This is so the healtcheck on our Google HTTP load balancers works
location /_threescale/healthz {
  return 200;
  access_log off;
}
